/**
 * 
 */
package com.basic.daoImpl;

import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.basic.database.Database;
import com.basic.dao.Dao;
import com.basic.pojo.AddressPojo;
import com.basic.pojo.UserPojo;

/**
 * @author HP
 *
 */
public class DaoImpl implements Dao {
	static PreparedStatement ps;
	
	public static boolean save(AddressPojo Value2) throws ClassNotFoundException, SQLException, IOException {
		ps = Database.getConnection().prepareStatement(
				"insert into address(user_id,address_line1,address_line2,city,state,country,pincode,created_time)"
						+ "values((select max(id) from registration.user),?,?,?,?,?,?,Now())");
		ps.setString(1, Value2.getAddress_line1());
		ps.setString(2, Value2.getAddress_line2());
		ps.setString(3, Value2.getCity());
		ps.setString(4, Value2.getState());
		ps.setString(5, Value2.getCountry());
		ps.setInt(6, Value2.getPincode());
		int result = ps.executeUpdate();
		ps.close();
		return (result == 1 ? true : false);
	}

	@Override
	public boolean insert(UserPojo Value1,AddressPojo Value2) throws ClassNotFoundException, SQLException, IOException {
		// TODO Auto-generated method stub
		//boolean result = false;
		
		ps = Database.getConnection().prepareStatement(
				"insert into user(role_id,firstname,lastname,email,mobile_no,password,gender,date_of_birth,created_time)"
						+ "values(?,?,?,?,?,?,?,?,Now())");
		ps.setInt(1, Value1.getRole_id());
		ps.setString(2, Value1.getFirstname());
		ps.setString(3, Value1.getLastname());
		ps.setString(4, Value1.getEmail());
		ps.setLong(5, Value1.getMobile_no());
		ps.setString(6, Value1.getPassword());
		ps.setString(7, Value1.getGender());
		ps.setString(8, Value1.getDate_of_birth());
		
		int result = ps.executeUpdate();
		/*if(ps.executeUpdate()==1) {
			result = save(Value2);
		}*/
		ps.close();
		Database.getConnection().close();
		return ( result == 1 ? true : false);
	}

	@Override
	public List<UserPojo> getAllUser() throws ClassNotFoundException, SQLException, IOException {
		// TODO Auto-generated method stub
		List<UserPojo> users = new ArrayList<UserPojo>();
		
		Statement stat = Database.getConnection().createStatement();
		ResultSet result = stat.executeQuery("select * from user");
		
		UserPojo user;
		while(result.next()) {
			user = new UserPojo();
			user.setUser_id(result.getInt(1));
			user.setRole_id(result.getInt(2));
			user.setFirstname(result.getString(3));
			user.setLastname(result.getString(4));
			user.setEmail(result.getString(5));
			user.setMobile_no(result.getLong(6));
			user.setPassword(result.getString(7));
			user.setGender(result.getString(8));
			user.setDate_of_birth(result.getString(9));
			user.setCreated_time(result.getString(10));
			user.setUpdate_by(result.getInt(11));
			user.setUpdate_time(result.getString(12));
			
			users.add(user);
		}
		result.close();
		stat.close();
		Database.getConnection().close();
		return users;
	}
	
	@Override
	public boolean updateUser(UserPojo userValue)
			throws ClassNotFoundException, SQLException, IOException {
		// TODO Auto-generated method stub
		ps = Database.getConnection().prepareStatement(
				"update user set firstname = ?, lastname = ?, email = ?, mobile_no = ?, password = ?, gender = ?, date_of_birth= ?"
						+ " Where user_id = ");
		ps.setString(1, userValue.getFirstname());
		ps.setString(2, userValue.getLastname());
		ps.setString(3, userValue.getEmail());
		ps.setLong(4, userValue.getMobile_no());
		ps.setString(5, userValue.getPassword());
		ps.setString(6, userValue.getGender());
		ps.setString(7, userValue.getDate_of_birth());
		
		int result = ps.executeUpdate();
		return ( result == 1 ? true : false);
	}
	
	@Override
	public boolean updateAddress(AddressPojo Value2)
			throws ClassNotFoundException, SQLException, IOException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean del(int id) throws ClassNotFoundException, SQLException, IOException {
		// TODO Auto-generated method stub
		Statement stat = Database.getConnection().createStatement();
		int result = stat.executeUpdate("delete from user where user_id="+id);
		
		stat.close();
		Database.getConnection().close();
		return (result == 1 ? true : false);
	}
}
